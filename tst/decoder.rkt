(define (run-decoder-tests)
   (load "src/decoder.rkt")

   (get-bit-from-frequency-test)
   (is-same-angle?-test)
   (angle-is-one?-test)
   (get-byte-from-bit-vector-test))

(define (get-bit-from-frequency-test)
   ;(get-bit-from-frequency frequency)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 123.456+123i 0)) 0)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 6345.5345+534.345i 0)) 0)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 123.456+123i 1)) 1)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 6345.5345+534.345i 1)) 1))

(define (is-same-angle?-test)
   ;(is-same-angle? a b)
   (check-equal? (is-same-angle? 0.552 0.552) true)
   (check-equal? (is-same-angle? 1.2442 1.0) true)
   (check-equal? (is-same-angle? (+ 1 round-off-error) 1) false))

(define (angle-is-one?-test)
   ;(angle-is-one? x)
   (check-equal? (angle-is-one? 0) true)
   (check-equal? (angle-is-one? pi/2) true)
   (check-equal? (angle-is-one? (- 0 pi/2)) true)
   (check-equal? (angle-is-one? pi) true)
   (check-equal? (angle-is-one? (- 0 pi)) true)
   (check-equal? (angle-is-one? 0.5234) false)
   (check-equal? (angle-is-one? 1.1293) false))

(define (get-byte-from-bit-vector-test)
   ;(get-byte-from-bit-vector bits)
   (let [(v (make-vector 8 0))]
	(check-equal? (get-byte-from-bit-vector v) 0)
	(vector-set! v 7 1)
	(check-equal? (get-byte-from-bit-vector v) 1)
	(vector-set! v 5 1)
	(check-equal? (get-byte-from-bit-vector v) 5)
	(vector-set! v 4 1)
	(check-equal? (get-byte-from-bit-vector v) 13)))
