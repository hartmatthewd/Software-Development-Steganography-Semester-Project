(define (run-decoder-tests)
   (display "tst/decoder.rkt") (newline)
   (decode-payload-from-carrier-test)
   (decode-payload-test)
   (decode-payload-size-test)
   (decode-next-byte-test)
   (get-bit-from-frequency-test)
   (is-same-angle?-test)
   (angle-is-one?-test)
   (get-byte-from-bit-vector-test))

(define (decode-payload-from-carrier-test)
;(decode-payload-from-carrier carrier output)
(error "No test cases for decode-payload-from-carrier"))

(define (decode-payload-test)
;(decode-payload decoder)
(error "No test cases for decode-payload"))

(define (decode-payload-size-test)
;(decode-payload-size decoder)
(error "No test cases for decode-payload-size"))

(define (decode-next-byte-test)
;(decode-next-byte decoder)
(error "No test cases for decode-next-byte"))

(define (get-bit-from-frequency-test)
;(get-bit-from-frequency frequency)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 123.456+123i 0)) 0)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 6345.5345+534.345i 0)) 0)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 123.456+123i 1)) 1)
    (check-equal? (get-bit-from-frequency (get-shifted-frequency 6345.5345+534.345i 1)) 1))

(define (is-same-angle?-test)
;(is-same-angle? a b)
(error "No test cases for is-same-angle?"))

(define (angle-is-one?-test)
;(angle-is-one? x)
(error "No test cases for angle-is-one?"))

(define (get-byte-from-bit-vector-test)
;(get-byte-from-bit-vector bits)
   (let ((v (make-vector 8 0)))
     (check-equal? (get-byte-from-bit-vector v) 0)
     (vector-set! v 7 1)
     (check-equal? (get-byte-from-bit-vector v) 1)
     (vector-set! v 5 1)
     (check-equal? (get-byte-from-bit-vector v) 5)
     (vector-set! v 4 1)
     (check-equal? (get-byte-from-bit-vector v) 13)))
