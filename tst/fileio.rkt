(define (run-fileio-tests)
   (display "tst/fileio.rkt") (newline)
   (test-is-mp3?)
   (test-is-wav?)
   (test-file-writer-reader))

(define (test-file-writer-reader)
    (let [(sample-wavfile (create-test-wavfile))]
         (vector-set! (vector-ref (wavfile-samples sample-wavfile) 0) 0 -44)
         (vector-set! (vector-ref (wavfile-samples sample-wavfile) 0) 1 13533)
         (wavfile->file sample-wavfile "/tmp/_test")
         (let [(w (file->wavfile "/tmp/_test"))]
              (check-equal? (wavfile-endianess sample-wavfile) (wavfile-endianess w))
              (check-equal? (wavfile-audioformat sample-wavfile) (wavfile-audioformat w))
              (check-equal? (wavfile-channels sample-wavfile) (wavfile-channels w))
              (check-equal? (wavfile-samplerate sample-wavfile) (wavfile-samplerate w))
              (check-equal? (wavfile-byterate sample-wavfile) (wavfile-byterate w))
              (check-equal? (wavfile-blockalign sample-wavfile) (wavfile-blockalign w))
              (check-equal? (wavfile-bytespersample sample-wavfile) (wavfile-bytespersample w))
              (check-equal? (wavfile-chunkstart sample-wavfile) (wavfile-chunkstart w))
              (check-equal? (wavfile-chunksize sample-wavfile) (wavfile-chunksize w))
              (check-equal? (wavfile-samples sample-wavfile) (wavfile-samples w)))))

(define (test-is-mp3?)
   (check-false (is-mp3? "testwav.wav"))
   (check-true (is-mp3? "testmp3.mp3")))

(define (test-is-wav?)
   (check-true (is-wav? "testwav.wav"))
   (check-false (is-wav? "testmp3.mp3")))
